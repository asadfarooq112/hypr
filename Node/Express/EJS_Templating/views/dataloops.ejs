<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    
    <% for (let i=0; i < sampleDataKey.length ; i++) { %>

    <div class="outerbox">

        <div class="image">
            <img src="<%= sampleDataKey[i].image %>">
        </div>

        <div class="name"> 
            <h2> <%= sampleDataKey[i].name %> </h2>
        </div>

        <div class="descripton">
            <p> <%= sampleDataKey[i].description %> </p>
        </div>
        

        <% for (let j=0; j < moreDataKey.length ; j++) { %>


        <div class="articles"> 
            <h4> <%= moreDataKey[j].title %> </h4>
            <p> <%= moreDataKey[j].content %> </p>

        </div>
        <% } %>

    </div>

    <% } %>




<!-- Below style and script for the content taken from chatgpt -->
 
<style>
    /* General Reset */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
  
    body {
      font-family: 'Helvetica Neue', sans-serif;
      background-color: #f5f5f5;
      padding: 20px;
      color: #333;
    }
  
    /* Grid Layout with Fixed Block Size */
    .grid-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 400px)); /* Inline blocks with max 400px width */
      gap: 20px; /* Space between blocks */
      justify-content: center; /* Center the blocks horizontally */
    }
  
    .outerbox {
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      transition: transform 0.4s ease, box-shadow 0.4s ease;
      position: relative;
      padding: 20px;
      cursor: pointer;
      width: 100%; /* Make it respect the grid width */
      max-width: 400px; /* Ensure no block exceeds 400px width */
    }
  
    .outerbox:hover {
      transform: translateY(-10px);
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }
  
    /* Image Styling */
    .image img {
      width: 100%;
      height: 200px;
      object-fit: cover;
      transition: transform 0.4s ease;
      border-radius: 10px;
    }
  
    .outerbox:hover .image img {
      transform: scale(1.05);
    }
  
    /* Product Name Styling */
    .name h2 {
      font-size: 1.5rem;
      margin: 15px 10px;
      color: #333;
      font-weight: 600;
      text-align: center;
    }
  
    /* Product Description Styling */
    .description p {
      font-size: 1rem;
      color: #666;
      margin: 0 10px 15px 10px;
      text-align: center;
    }
  
    /* Articles Styling */
    .articles {
      background-color: #f1f1f1;
      border-radius: 8px;
      padding: 15px;
      margin-top: 15px;
      transition: transform 0.4s ease;
    }
  
    .articles h4 {
      font-size: 1.2rem;
      color: #333;
      margin-bottom: 8px;
      text-align: center;
    }
  
    .articles p {
      font-size: 1rem;
      color: #666;
      text-align: center;
    }
  
    /* Flying Animation */
    .flying {
      position: absolute;
      animation: flyOff 5s ease forwards;
      z-index: 999;
    }
  
    /* Keyframes for Flying */
    @keyframes flyOff {
      0% {
        transform: translate(0, 0) rotate(0deg);
        opacity: 1;
      }
      100% {
        transform: translate(calc(100vw * var(--randomX)), calc(100vh * var(--randomY))) rotate(360deg);
        opacity: 0;
      }
    }
  </style>
  
  
  <script>
    // Function to make elements fly off the screen on click
    document.querySelectorAll('.outerbox').forEach(box => {
      box.addEventListener('click', function() {
        // Generate random flight directions
        let randomX = (Math.random() > 0.5 ? 1 : -1) * (Math.random() + 0.5); // Random X multiplier
        let randomY = (Math.random() > 0.5 ? 1 : -1) * (Math.random() + 0.5); // Random Y multiplier
  
        // Set custom properties for CSS animation
        box.style.setProperty('--randomX', randomX);
        box.style.setProperty('--randomY', randomY);
  
        // Add 'flying' class to trigger the animation
        box.classList.add('flying');
  
        // Remove the block from the grid after the animation is done (5s in this case)
        setTimeout(() => {
          box.style.display = 'none'; // Remove the element after it flies away
        }, 5000); // Duration matches the animation duration in CSS
      });
    });
  </script>
  
  
  


</body>
</html>
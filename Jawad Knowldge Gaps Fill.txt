-make code as reusable as possible
../../ two folders back

body > ul > li:nth-child(2)
another way to select ccss (taken from chrome)

make html seo friendly

tyr to use as less divs as possible

learn best way to structure html

use dev tools for css (its better)

string methods used mostly:
-endsWith
-includes
-indexOf
-length
-match
-replace
-replaceAll
-slice
-splice
-split
-startsWith
-substr
-substring
-toLowerCase
-toUpperCase
-trim

` ` When using back ticks, it shows as exactly wioth spoaces and enters as it is written in code


// Hoisting: Javascstipt first saves varibales declared with VAR as iundefined when called before initialized later in code. Fucntions can run normally even if intiialized later in code.  (Hoisting helps in debugging, learn hosting in detail)

let funcDivisor = function(divisor) {

    return function(number) {
        console.log(number/divisor);
    }
}

funcDivisor(7)(14);   this can work also]

syntax to run nameless functions  (function defitinion)(argument)

Objects and arrays are passed by reference. Therefore if you edit an object in a function (object is passed as argument in the function), the actual memory address if affected and therefore the object outside the fucntion is also changed. Same is the case the with arrays, i fyou want to avoid this, make a deep copy. {which we can make with ... spread}

also if you assign a new varibale to an object. changing the new varibale also changes the object, same is case with array.

Therefore we use this.


If you know that you will change the value of the variable, use let otherwise almost alwyas use const


array.sort() we can use call back inside a-b (ascending), b-a (descending)

console.log(array1.sort(
    (a,b) => {
        return b-a;
    }
));


 Common Array methods used:
-every
-filter
-find
-findIndex
-flat
-forEach
-includes	
-indexOf
-join
-length
-map
-pop
-push
-reduce
-reverse
-slice
-some
-sort
-splice



forEach vs map:
		forEach when we only want to use array values. Map when we want to use each value to create a new array (or modified array)



// Object Methods are useful: (don't need to memorize)


// Object.keys() – Returns the keys of the object.
// Object.values() – Returns the values of the object.
// Object.entries() – Returns the key-value pairs of the object.
// Object.assign() – Copies properties from one or more objects to a target object.
// Object.freeze() – Freezes the object, making it immutable.
// Object.seal() – Seals the object, preventing new properties from being added.
// Object.create() – Creates a new object with a specified prototype.
// Object.defineProperty() – Defines a property on an object.
// Object.defineProperties() – Defines multiple properties on an object.
// Object.getOwnPropertyDescriptors() – Returns the descriptors of all properties.
// Object.getPrototypeOf() – Returns the prototype of the object.
// Object.setPrototypeOf() – Sets the prototype of the object.
// Object.is() – Checks if two values are the same.
// Object.isExtensible() – Checks if new properties can be added to the object.
// Object.preventExtensions() – Prevents new properties from being added.


Sets are just arrays without duplicate values. You can create new set using Set constructor


--Objects captured by DOM are HTML Element type

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
-- in DOM docuemtn object lies in window object

--many differetn types of dom objects. different ones have different fgucntions


e.target only captures the child obejct which is clicked on

--for await async usage, use try catch to do error handling

--then catch [finally: is also like thwen catch but exedutews no watter whathappens]


-- Whenever new object is made from class, all the code in the constructor runs first

--Private, protected and subsclasses, inheritence study later

-express.static gives access (makes available) server files to client side

-add semicolon even after { } otherwise compiler can give error


- .env files contains secret variables. 


____________________________________________


always import dotenv module

In packagejson always set type: module

@blabla  help in comments in documetnsation show sup in mouse hove over the fucntion etc


http module can be used on top of express -> to setRequest timeouts, manage errors,

If you cant findf methods on an pbject, look in the __proto__

Webserver is different from Application server (node app). CLient request first goes tyo web server then comes to app server (like our http server) 

better to run server using npm start command. and in npm start add the nodemon command

to go to definition of fucntion, pressc ctrl+click

By convention, use err for error and e for events

Sometimes we use [return res.send('bla bla')]  in if conditions, instead of doing only res.send(bla), when we dont want code below return keyword to run. Otherwise eventhough res.send finishes the request and sends the reponse then adn there, the code below can run..

ctrl D in VS code selects al instances of that word
s
add controllers and middlewares in router.js file and add router on main


e.g in jewlry in ERP, in products module for example, use controllers for fucntionality and router and controller for product specific functinoaloity

// req.headers (used for managing request headers)

// in routers if we add two paramenters in call back, first one is req, secon is res
// if we add 3 paramenters, 1st is req, 2nd res, 3rd is next
// if we add 4, then 1st is error, 2nd req, 3rd res, 4th next


when using EJS files and connecting css and js files to the EJS or when connection anything to anythingelse,  <link href="/css/bla.css"> means we are referring to the root directory (so absolute path).
However when we do <link href="./css/bla.css"> it is the syntax of the RELATIVE  path, relative to the lication of the EJS file. So BE WARY OF THIS. THEREFORE BETTER TO USE / only (absolute path to static files)

When importing files on sevrer to server (e.g importiing JSON files that are placed on servre to a controller to do something), use ./ (relative path), since / (absolute) accesses the file via FRONT END, and ./ accesses it via backend. think about it whhy :)

use assert {type: 'json'} when importing json directly
import ladiesRings from './expressStatic/BJ_files/json_files/Ladies_Rings_Complete_Data.json' assert {type: 'json'}

when doing next() in middlewares its good practice to do return next() to make sure nothing after next() runs

To handle error in async fcuntions, use TRY CATCH. and if using async middleware like async (req, res, next) => { bla} then do TRY bla  catch((err) => next(err). Otherwise you can't send next(e) in async without catch(e)


In CSS to create time animations use keyframes and media:
Example:

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

- FUnctions are objects too. so you can add properties and methods to a functions.
e.g function helloFunc (a) => {blabla};
    helloFunc.key1 = value1 //we can do this
    helloFunc.method1 = function (c) => {blabla} //can do this too
